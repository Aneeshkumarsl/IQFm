HTML

   <form novalidate [formGroup]="loginForm" (ngSubmit)='login()'>
      <div class="card card-block login-card">
        <h3 class="form-label">Welcome </h3>
        <div class="form-group" [ngClass]="{
          'has-danger': userId.invalid && (userId.dirty || userId.touched),
          'has-success': userId.valid && (userId.dirty || userId.touched)}">
          <div class="input-group">
            <span class="input-group-addon addon-left" id="username">
              <i class="fa fa-user fa-fw"></i>
            </span>
            <input class="form-control with-primary-addon" placeholder="User Account" type="text" formControlName="userId" required>
            <div *ngIf="userId.errors && (userId.dirty || userId.touched)">
         <p class='error' *ngIf= "userId.errors.required">User name is required</p>
      </div>
       </div>
          </div>
          <div class="form-group" [ngClass]="{
            'has-danger': Password.invalid && (Password.dirty || Password.touched),
            'has-success': Password.valid && (Password.dirty || Password.touched)}">
          <div class="input-group">
            <span class="input-group-addon addon-left" id="Password">
              <i class="fa fa-lock fa-fw"></i>
            </span>
            <input class="form-control with-primary-addon" placeholder="Password" type="Password" formControlName="Password" required>
            <div *ngIf="Password.errors && (Password.dirty || Password.touched)">
              <p class='error' *ngIf="Password.errors.required">Password is required</p>
            </div>
          </div>
        </div>
        
          <button type='submit'  class="btn btn-lg btn-primary">Login</button>
          <!-- routerLink="/pages/index" <a href="pages/index" class="btn btn-link">Register Now. â†’</a> -->
      </div>
      </form>
      
      
      
      TS
      
      import { Component, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { FormGroup, FormBuilder, FormControl, Validators } from '@angular/forms';
import { tap, map, finalize, catchError ,} from 'rxjs/operators';
import { of, throwError, from } from 'rxjs';

import { AuthService, ApiService } from '@app/core';

import { NgxSmartModalService } from 'ngx-smart-modal'

@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.scss']
})
export class LoginComponent implements OnInit {

  error: string;
  isLoading: boolean;
  loginForm: FormGroup;
  userId: FormControl;
  Password: FormControl;
  showLogin: boolean;
  errorMsg: string
  constructor(
    private formBuilder: FormBuilder,
    private router: Router,
    private authService: AuthService,
    private apiService : ApiService,
    public modalService : NgxSmartModalService

  ) {
    this.createFormControler();
    this.createForm();
  }


  createFormControler() {
    this.userId = new FormControl('', Validators.required);
    this.Password = new FormControl('', Validators.required);
  }

  createForm() {
    this.loginForm = new FormGroup({
      userId: this.userId,
      Password: this.Password

    })
  }
  ngOnInit() { 
    if(this.authService.getToken()){
      this.router.navigate(['/dashboard/home'])
    }else {
      this.showLogin = true
    }
  }
 

  login() {
    this.isLoading = true;
    let self = this
    const credentials = this.loginForm.value;
    if(self.loginForm.valid){
      self.router.navigate(['/dashboard/home'])
    // this.authService.login(credentials)
    //   .pipe(
    //     map(users => {
    //       if(users.body && users.body.status === "success" || true){

    //         self.router.navigate(['/dashboard/home'])
    //         sessionStorage.setItem('token',users.headers.get('leapauthtoken'))
    //         console.log('Token Data Stroed Into DB')
             
           
    //         // this.apiService.get('/employees/entitlements','users',{}).pipe(
    //         //   tap(entitlements => {
    //         //     if(entitlements && entitlements[0]){

    //         //       sessionStorage.setItem('user',entitlements[0].userName)
    //         //       self.router.navigate(['/dashboard/home'])
    //         //     }
    //         //   }),
    //         //   finalize(() => this.isLoading = false),
    //         //   catchError(error => of(this.error = error))
    //         // ).subscribe();
                        

    //       }else if(users.body && users.body.error === "authError"){
    //         this.errorMsg = users.body.error
    //         console.log(users.body.error)
           
    //         return throwError(users.body.message)
    //       }
    //        else {
    //         return throwError('Invalid Unknown Error');
    //       }

          
    //     }),
    //     finalize(() => this.isLoading = false),
    //     catchError(error => of(
    //       this.errorMsg = error.message ? error.message : 'Invalid Error',
    //       console.log(error),
    //       self.openPopUp({
    //         title : 'Login Failed',
    //         msg : error.message
    //       })

    //       ))
    //   ).subscribe();
  }
  // else {
  //   self.openPopUp({
  //     title : 'Login Failed',
  //     msg : 'Please enter mandatory fields with valid information to proceed further'
  //   })
  // }
  }

 

  openPopUp(obj) {
    console.log(obj,"obj")
    this.modalService.setModalData(obj, 'infoModal',true);
    this.modalService.getModal('infoModal').open()

  }
}


scss

// @import '../../shared/theme/conf';
.login-card {
    padding: 20px;
    position: absolute;
    top: 40%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 400px;
    height: auto;
    .form-group {
        padding: 0;
    }
    .form-label {
        display: block;
        color: #26253c;
        padding: 0 10px;
    }
    span.form-label {
        color: lighten(#26253c, 30%);
    }
    .input-group {
        padding: 0;
        margin: 25px 0;
    }
    .form-control {
        background: transparent;
        color:#26253c;
    }
    .input-group-addon {
        background: transparent;
        border: none;
        font-size: 16px;
        color: lighten(#26253c, 20%);
    }
    .btn {
        width: 100%;
    }
    .btn-link {
        margin: 10px 0;
     color: lighten(#26253c, 30%);
    }
}
   .error{
    color: red
}
